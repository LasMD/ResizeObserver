<pre class='metadata'>
Title: Resize Observer
Shortname: resize-observer
Level: 1
Status: ED
Group: Web Performance Working Group
URL: https://github.com/WICG/ResizeObserver/
Editor: Aleks Totic, Google, atotic@google.com
Abstract: This specification describes an API for observing changes to Element's size.
</pre>
<pre class="anchors">
urlPrefix: https://drafts.csswg.org/css-box-3/
    url: #content-box; type: dfn; text: content box
urlPrefix: https://www.w3.org/TR/css3-positioning/
    url: #viewport; type: dfn; text: viewport
urlPrefix: https://html.spec.whatwg.org/multipage/
    urlPrefix: webappapis.html;
        url: #processing-model-8; type: dfn; text: HTML Processing Model
urlPrefix: https://github.com/WICG/IntersectionObserver/
    urlPrefix: index.html;
        url: #intersection-observer-interface; type: dfn; text: IntersectionObserver
</pre>
<pre class=link-defaults>
spec:dom; type:interface; text:Document
</pre>

<h2 id="intro">Introduction</h2>

<em>This section is non-normative.</em>

Responsive Web Components need to respond to <a>content box</a>
size changes. An example is an {{Element}} that displays a map:

* it displays a map by tiling its content box with {{Element}} tiles.

* when resized, it must redo the tiling.

Responsive Web Applications can already respond to <a>viewport</a> size changes.
This is done with CSS media queries, or window.{{resize}} event.

The ResizeObserver API is an interface for observing changes
to {{Element}}'s {{clientWidth}} and {{clientHeight}}. It is an {{Element}}
counterpart to window.{{resize}} event.

{{clientWidth}} and {{clientHeight}} are observed because
they are the best match for size of the {{Element}}'s <a>content box</a>.

Desirable side effects of watching {{clientWidth}} are:

* observation will fire when watched Element is inserted/removed from DOM.

* observation will fire when watched Element display gets set to hidden.

* observations do not fire for inline Elements.

* observations will not be triggered by CSS transforms.

{{clientWidth}} DOM API rounds its value to |long|. We will observe
<a>computed clientWidth</a>, and not the DOM API rounded value.
This prevents an undesirable side effect of rounded clientWidth
changing even when <a>computed clientWidth</a> is constant.
This happens because rounding can also depend on location.

{{offsetWidth}} was also considered. It was rejected because
it contained width of the scroller.

<div class="example">
  <pre highlight="js">
    var ro = new ResizeObserver( entries => {
      for (entry of entries) {
        console.log(
            'element:', entry.target,
            'width: ', entry.clientWidth,
            ' height: ', entry.clientHeight);
      }
    });

    let el = document.createElement('div');
    document.body.appendChild(el);
    ro.observe(el);
    el.appendChild(document.createElement('input'));
    // el.clientWidth changes after el.appendChild

    el = document.createElement('div');
    ro.observe(el);
    document.body.appendChild(el);
    // el.clientWidht changes after el is inserted into body.

    el.style.display = 'none';
    // el.clientWidth changes after el was hidden.

    // All these size changes would trigger ResizeObserver
  </pre>
</div>

<h2 id="api">Resize Observer API</h2>

<h3 id="resize-observer-interface">ResizeObserver interface</h3>

The ResizeObserver interface is used to observe changes to {{Element}}'s
{{clientWidth}} and {{clientHeight}}.

It is modeled after {{MutationObserver}} and <a>IntersectionObserver</a>.

<pre class="idl">
[Constructor(ResizeObserverCallback callback),
    Exposed=Window]
interface ResizeObserver {
    void observe(Element target);
    void unobserve(Element target);
    void disconnect();
};
</pre>

<div dfn-type="method" dfn-for="ResizeObserver">
    : <dfn constructor lt="ResizeObserver(callback)">new ResizeObserver(callback)</dfn>
    ::
        1. Let |this| be a new {{ResizeObserver}} object.

        2. Set |this| internal {{ResizeObserver/callback}} slot to callback.

        3. Add |this| to {{Document}}'s {{Document/resizeObservers}} slot.


    : <dfn method>observe(target)</dfn>
    ::
        Adds target to the list of observed elements.

        1. If |target| is in {{ResizeObserver/observationTargets}} slot, return.

        2. Let |resizeObservation| be new {{ResizeObservation}}(|target|).

        3. Add the |resizeObservation| to the {{ResizeObserver/observationTargets}} slot.

    :  <dfn method for="ResizeObserver">unobserve(target)</dfn>
    ::
        Removes |target| from the list of observed elements.

        1. Let |observation| be {{ResizeObservation}} in {{ResizeObserver/observationTargets}} whose target slot is |target|.

        2. If |observation| is not found, return.

        3. Remove |observation| from {{ResizeObserver/observationTargets}}

    : <dfn method>disconnect()</dfn>
    ::
        1) Clear the {{ResizeObserver/observationTargets}} list.

        2) Clear the {{ResizeObserver/activeTargets}} list.

</div>

<h3 id="resize-observer-callback">ResizeObserverCallback</h3>

<pre class="idl">
callback ResizeObserverCallback = void (sequence&lt;ResizeObserverEntry> entries, ResizeObserver observer)
</pre>

This callback delivers {{ResizeObserver}}'s notifications. It is invoked by a
<a>broadcast active observations</a> algorithm.

<h3 id="resize-observer-entry-interface">ResizeObserverEntry</h3>

<pre class="idl">
[Constructor(Element target)
]
interface ResizeObserverEntry {
    readonly attribute Element target;
    readonly attribute float clientWidth;
    readonly attribute float clientHeight;
};
</pre>

<div dfn-type="attribute" dfn-for="ResizeObserverEntry">
    : <dfn>target</dfn>
    ::
        The {{Element}} whose size has changed.
    : <dfn>clientWidth</dfn>
    ::
        {{Element}}'s <a>computed clientWidth</a> when {{ResizeObserverCallback}} is invoked.
    : <dfn>clientHeight</dfn>
    ::
        {{Element}}'s <a>computed clientHeight</a> when {{ResizeObserverCallback}} is invoked.
</div>

<div dfn-type="method" dfn-for="ResizeObserverEntry">
    : <dfn constructor lt="ResizeObserverEntry(target)">new ResizeObserverEntry(target)</dfn>
    ::
        1. Let |this| be a new {{ResizeObserverEntry}}.

        2. Set |this| {{ResizeObserverEntry/target}} slot to |target|.

        3. Set |this|.clientWidth to |target|.<a>computed clientWidth</a>.

        4. Set |this|.clientHeight to |target|.<a>computed clientHeight</a>
</div>

<h3 id="resize-observation-interface">ResizeObservation</h3>
ResizeObservation holds observation information for a single {{Element}}. This
interface is not visible to Javascript.

<pre class="idl">
[Constructor(Element target)
]
interface ResizeObservation {
    readonly attribute Element target;
    readonly attribute float lastBroadcastWidth;
    readonly attribute float lastBroadcastHeight;
    boolean isActive();
};
</pre>
<div dfn-type="attribute" dfn-for="ResizeObservation">
    : <dfn>target</dfn>
    :: The observed {{Element}}.
    : <dfn>lastBroadcastWidth</dfn>
    :: Last broadcast <a>computed clientWidth</a>.
    : <dfn>lastBroadcastHeight</dfn>
    :: Last broadcast <a>computed clientHeight</a>.
</div>
<div dfn-type="method" dfn-for="ResizeObservation">
    : <dfn constructor lt="ResizeObservation(target)">new ResizeObservation(target)</dfn>
    ::
        1. Let |this| be a new {{ResizeObservation}} object

        2. Set |this| internal {{ResizeObservation/target}} slot to |target|

        3. Set |this| {{ResizeObservation/lastBroadcastWidth}} slot to |target|.<a>computed clientWidth</a>.

        4. Set |this| {{ResizeObservation/lastBroadcastHeight}} slot to |target|.<a>computed clientHeight</a>.


    : <dfn method lt="isActive()">isActive()</dfn>
    ::

        1. If {{ResizeObservation/target}}.<a>computed clientWidth</a> != {{ResizeObservation/lastBroadcastWidth}} return true.

        2. If {{ResizeObservation/target}}.<a>computed clientHeight</a> != {{ResizeObservation/lastBroadcastHeight}} return true.

        3. return false.

</div>

<h2 id="processing-model">Processing Model</h2>

<h3 id="internal-slot-definitions">Internal Slot Definitions</h3>

<h4 id="document-slots">Document</h4>

<a>Document</a> has a <dfn attribute for="Document">resizeObservers</dfn> slot that is a list of {{ResizeObserver}}s in this document. It is initialized to empty.

<h4 id="resize-observer-slots">ResizeObserver</h4>

{{ResizeObserver}} has a <dfn attribute for="ResizeObserver">callback</dfn> slot, initialized by constructor.

{{ResizeObserver}} has an <dfn attribute for="ResizeObserver">observationTargets</dfn> slot, which is a list of {{ResizeObservation}}s.
It represents all Elements being observed.

{{ResizeObserver}} has a <dfn attribute for="ResizeObserver">activeTargets</dfn> slot, which is a list of {{ResizeObservation}}s. It represents all Elements whose size has changed since last observation broadcast.


<h3 id="css-modifications">CSS Modifications</h3>
CSS defines how {{clientWidth}} is computed, and a DOM API to access it.
The compute algorithm generates a float.
DOM API rounds the computed value, and returns a |long|. Rounding algorithm can also depend on Element's location.

This dependence on location is undesirable: rounded clientWidth can change when computed clientWidth stays constant. This happens if Element moves.

To avoid spurious notifications, ResizeObserver will watch the <a>computed clientWidth</a>, and <a>computed clientHeight</a>, and not the rounded ones.

<h4 id="client-width-computed">computed clientWidth</h4>
<dfn>computed clientWidth</dfn> is value generated by CSS {{clientWidth}} algorithm. The value is not rounded.
<h4 id="client-height-computed">computed clientHeight</h4>
<dfn>computed clientHeight</dfn> is value generated by CSS {{clientHeight}} algorithm. The value is not rounded.

<h3 id="algorithms">Algorithms</h3>

<h4 id="gather-active-observations-h">Gather active observations</h4>

It computes all active observations for a |document|. To <dfn>gather active observations</dfn>, run these steps:

1. For each |observer| in {{Document/resizeObservers}} run these steps:

    1. Clear |observer|'s {{ResizeObserver/activeTargets}}.

    2. For each |observation| in |observer|.{{ResizeObserver/observationTargets}} run this step:

        1. If |observation|.{{ResizeObservation/isActive()}} is true, add |observation| to {{ResizeObserver/activeTargets}}


<h4 id="has-active-observations-h">Has active observations</h4>

To determine if {{Document}} <dfn>has active observations</dfn> run these steps:

1. For each |observer| in {Document/resizeObservers}} run this step:

    1. If |observer|.{{ResizeObserver/activeTargets}} is not empty, return true.

2. return false.

<h4 id="broadcast-resize-notifications-h">Broadcast active observations</h4>

To <dfn>broadcast active observations</dfn> for a |document|,
run these steps:

1. For each |observer| in |document|.{{Document/resizeObservers}} run these steps:

    1. If |observer|.{{ResizeObserver/activeTargets}} slot is empty, continue.

    2. Let |entries| be an empty list of {{ResizeObserverEntry}}ies.

    3. For each |observation| in {{ResizeObserver/activeTargets}} perform these steps:

        1. Let |entry| be new {{ResizeObserverEntry}}(|observation|.target

        2. Add |entry| to |entries|

        3. Set |observation|.{{ResizeObservation/lastBroadcastWidth}} to |entry|.clientWidth.

        4. Set |observation|.{{ResizeObservation/lastBroadcastHeight}} to |entry|.clientHeight.

    4. Invoke |observer|.{{ResizeObserver/callback}} with |entries|.

    5. Clear |observer|.{{ResizeObserver/activeTargets}}.


<h4 id="deliver-resize-error">Deliver Resize Limit Error</h4>

To <dfn>deliver resize limit error notification</dfn> run these steps:

    1. Create a new {{ErrorEvent}}.

    2. Initialize event's message slot to "ResizeObserver loop limit exceeded.".

    3. Dispach the event to document's window.

<h3 id="lifetime">ResizeObserver Lifetime</h3>

A {{ResizeObserver}} will remain alive until both of these conditions are met:

* there are no scripting references to the observer.

* the observer is not observing any targets.

<h3 id="integrations">External Spec Integrations</h3>

<h4 id="html-event-loop"> HTML Processing Model: Event Loop</h4>

{{ResizeObserver}} processing happens inside the step 7.12 of the <a>HTML Processing Model</a> event loop.

Step 12 is currently underspecified as:

<q>For each fully active Document in docs, update the rendering or user interface of that Document and its browsing context to reflect the current state.</q>.

Existing step 12 can be fully specified as:

For each fully active Document in docs, run the following steps for that Document and its browsing contents:

    1. recalc styles

    2. update layout

    3. paint


{{ResizeObserver}} extends step 12 with resize notifications.
It tries to deliver all pending notifications by looping
until no pending notifications are available. Infinite looping is prevented
by limiting the number of times loop is repeated to RESIZE_OBSERVER_LOOP_LIMIT constant. Looping too many times generates an error.

Note: RESIZE_OBSERVER_LOOP_LIMIT is currently arbitrarily set to 16.
It might get adjusted based on data we obtain from real-world usage.

Step 12 with {{ResizeObserver}} notifications is:

For each fully active Document in docs, run the following steps for that Document and its browsing contentx:

1. recalc styles

2. update layout

3. let |resizeNotificationCount| be 0

4. <a>gather active observations</a> for {{Document}}

5. repeat while (document <a>has active observations</a> && |resizeNotificationCount| < RESIZE_OBSERVER_LOOP_LIMIT)

    1. increment |resizeNotificationCount| by 1

    2. <a>broadcast active observations</a>

    3. recalc styles

    4. update layout

    5. <a>gather active observations</a> for {{Document}}

    6. if (document <a>has active observations</a> && |resizeNotificationCount| is RESIZE_OBSERVER_LOOP_LIMIT) then <a>deliver resize limit error notification</a>


