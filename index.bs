<pre class='metadata'>
Title: Resize Observer
Shortname: resize-observer
Level: 1
Status: ED
Group: Web Performance Working Group
URL: https://github.com/WICG/ResizeObserver/
Editor: Aleks Totic, Google, atotic@google.com
Abstract: This specification describes an API for observing changes to Element's size.
</pre>
<pre class="anchors">
urlPrefix: https://drafts.csswg.org/css-box-3/
    url: #width; type: dfn; text: content width
urlPrefix: https://drafts.csswg.org/css-box-3/
    url: #height; type: dfn; text: content height
urlPrefix: https://drafts.csswg.org/css-box-3/
    url: #padding-top; type: dfn; text: padding top
urlPrefix: https://drafts.csswg.org/css-box-3/
    url: #padding-left; type: dfn; text: padding left
urlPrefix: https://www.w3.org/TR/css3-positioning/
    url: #viewport; type: dfn; text: viewport
urlPrefix: https://html.spec.whatwg.org/multipage/
    urlPrefix: webappapis.html;
        url: #processing-model-8; type: dfn; text: HTML Processing Model
urlPrefix: https://github.com/WICG/IntersectionObserver/
    urlPrefix: index.html;
        url: #intersection-observer-interface; type: dfn; text: IntersectionObserver
</pre>
<pre class=link-defaults>
spec:dom; type:interface; text:Document
</pre>

<h2 id="intro">Introduction</h2>

<em>This section is non-normative.</em>

Responsive Web Components need to respond to <a>content rect</a>
size changes. An example is an {{Element}} that displays a map:

* it displays a map by tiling its content box with {{Element}} tiles.

* when resized, it must redo the tiling.

Responsive Web Applications can already respond to <a>viewport</a> size changes.
This is done with CSS media queries, or window.{{resize}} event.

The ResizeObserver API is an interface for observing changes
to {{Element}}'s <a>content rect</a>'s width and height. It is an {{Element}}'s
counterpart to window.{{resize}} event.

ResizeObserver's notifications can be used to respond to changes in {{Element}}'s size. Some interesting facts about these observations:

* observation will fire when watched Element is inserted/removed from DOM.

* observation will fire when watched Element display gets set to hidden.

* observations do not fire for non-replaced inline Elements.

* observations will not be triggered by CSS transforms.

* observation will fire when observation starts if Element has display, and Element's size is not 0,0.

<div class="example">
  <pre highlight="html">
    &lt;canvas id="elipse" style="display:block">&lt;/canvas>
    &lt;div id="menu" style="display:block;width:100px">
        &lt;img src="hamburger.jpg" style="width:24px;height:24px">
        &lt;p class="title">menu title&lt;/p>
    &lt;/div>
  </pre>
  <pre highlight="js">
    // In response to resize, elipse paints an elipse inside a canvas
    document.querySelector('#elipse').handleResize = entry => {
        let rx = Math.floor(entry.contentRect.width / 2);
        let ry = Math.floor(entry.contentRect.height / 2);
        let ctx = entry.target.getContext('2d');
        ctx.beginPath();
        ctx.ellipse(rx, ry, rx, ry, 0, 0, 2 * Math.PI);
        ctx.stroke();
    }
    // In response to resize, change title visibility depending on width
    document.querySelector('#menu').handleResize = entry => {
        let title = entry.target.querySelector(".title")
        if (entry.contentRect.width < 40)
            title.style.display = "none";
        else
            title.style.display = "inline-block";
    }

    var ro = new ResizeObserver( entries => {
      for (entry of entries) {
        let cs = window.getComputedStyle(entry.target);
        console.log('watching element:', entry.target);
        console.log(entry.contentRect.width,' is ', cs.width);
        console.log(entry.contentRect.height,' is ', cs.height);
        console.log(entry.contentRect.top,' is ', cs.paddingTop);
        console.log(entry.contentRect.left,' is ', cs.paddignLeft);
        if (entry.handleResize)
            entry.handleResize(entry);
      }
    });
    ro.observe(document.querySelector('#elipse');
    ro.observe(document.querySelector('#menu');
  </pre>
</div>

<h2 id="api">Resize Observer API</h2>

<h3 id="resize-observer-interface">ResizeObserver interface</h3>

The ResizeObserver interface is used to observe changes to {{Element}}'s
<a>content rect</a>.

It is modeled after {{MutationObserver}} and <a>IntersectionObserver</a>.

<pre class="idl">
[Constructor(ResizeObserverCallback callback),
    Exposed=Window]
interface ResizeObserver {
    void observe(Element target);
    void unobserve(Element target);
    void disconnect();
};
</pre>

<div dfn-type="method" dfn-for="ResizeObserver">
    : <dfn constructor lt="ResizeObserver(callback)">new ResizeObserver(callback)</dfn>
    ::
        1. Let |this| be a new {{ResizeObserver}} object.

        2. Set |this| internal {{ResizeObserver/callback}} slot to callback.

        3. Add |this| to {{Document}}'s {{Document/resizeObservers}} slot.

    : <dfn method>observe(target)</dfn>
    ::
        Adds target to the list of observed elements.

        1. If |target| is in {{ResizeObserver/observationTargets}} slot, return.

        2. Let |resizeObservation| be new {{ResizeObservation}}(|target|).

        3. Add the |resizeObservation| to the {{ResizeObserver/observationTargets}} slot.

    :  <dfn method for="ResizeObserver">unobserve(target)</dfn>
    ::
        Removes |target| from the list of observed elements.

        1. Let |observation| be {{ResizeObservation}} in {{ResizeObserver/observationTargets}} whose target slot is |target|.

        2. If |observation| is not found, return.

        3. Remove |observation| from {{ResizeObserver/observationTargets}}

    : <dfn method>disconnect()</dfn>
    ::
        1) Clear the {{ResizeObserver/observationTargets}} list.

        2) Clear the {{ResizeObserver/activeTargets}} list.

</div>

<h3 id="resize-observer-callback">ResizeObserverCallback</h3>

<pre class="idl">
callback ResizeObserverCallback = void (sequence&lt;ResizeObserverEntry> entries, ResizeObserver observer)
</pre>

This callback delivers {{ResizeObserver}}'s notifications. It is invoked by a
<a>broadcast active observations</a> algorithm.

<h3 id="resize-observer-entry-interface">ResizeObserverEntry</h3>

<pre class="idl">
[Constructor(Element target)
]
interface ResizeObserverEntry {
    readonly attribute Element target;
    readonly attribute DOMReadOnlyRect contentRect;
};
</pre>

<div dfn-type="attribute" dfn-for="ResizeObserverEntry">
    : <dfn>target</dfn>
    ::
        The {{Element}} whose size has changed.
    : <dfn>contentRect</dfn>
    ::
        {{Element}}'s <a>content rect</a> when {{ResizeObserverCallback}} is invoked.
</div>

<div dfn-type="method" dfn-for="ResizeObserverEntry">
    : <dfn constructor lt="ResizeObserverEntry(target)">new ResizeObserverEntry(target)</dfn>
    ::
        1. Let |this| be a new {{ResizeObserverEntry}}.

        2. Set |this| {{ResizeObserverEntry/target}} slot to |target|.

        3. Set |this|.contentRect.width to |target|.<a>content width</a>.

        4. Set |this|.contentRect.height to |target|.<a>content height</a>.

        5. Set |this|.contentRect.top to |target|.<a>padding top</a>.

        6. Set |this|.contentRect.left to |target|.<a>padding left</a>.
</div>

<h3 id="resize-observation-interface">ResizeObservation</h3>
ResizeObservation holds observation information for a single {{Element}}. This
interface is not visible to Javascript.

<pre class="idl">
[Constructor(Element target)
]
interface ResizeObservation {
    readonly attribute Element target;
    readonly attribute float broadcastWidth;
    readonly attribute float broadcastHeight;
    boolean isActive();
};
</pre>
<div dfn-type="attribute" dfn-for="ResizeObservation">
    : <dfn>target</dfn>
    :: The observed {{Element}}.
    : <dfn>broadcastWidth</dfn>
    :: Width of last broadcast <a>content width</a>.
    : <dfn>broadcastHeight</dfn>
    :: Width of last broadcast <a>content height</a>.
</div>
<div dfn-type="method" dfn-for="ResizeObservation">
    : <dfn constructor lt="ResizeObservation(target)">new ResizeObservation(target)</dfn>
    ::
        1. Let |this| be a new {{ResizeObservation}} object

        2. Set |this| internal {{ResizeObservation/target}} slot to |target|

        3. Set |this| {{ResizeObservation/broadcastWidth}} slot to 0.

        4. Set |this| {{ResizeObservation/broadcastHeight}} slot to 0.


    : <dfn method lt="isActive()">isActive()</dfn>
    ::

        1. If {{ResizeObservation/target}}.<a>content width</a> != {{ResizeObservation/broadcastWidth}} return true.

        2. If {{ResizeObservation/target}}.<a>content height</a> != {{ResizeObservation/broadcastHeight}} return true.

        3. return false.

</div>

<h2 id="processing-model">Processing Model</h2>

<h3 id="internal-slot-definitions">Internal Slot Definitions</h3>

<h4 id="document-slots">Document</h4>

<a>Document</a> has a <dfn attribute for="Document">resizeObservers</dfn> slot that is a list of {{ResizeObserver}}s in this document. It is initialized to empty.

<h4 id="resize-observer-slots">ResizeObserver</h4>

{{ResizeObserver}} has a <dfn attribute for="ResizeObserver">callback</dfn> slot, initialized by constructor.

{{ResizeObserver}} has an <dfn attribute for="ResizeObserver">observationTargets</dfn> slot, which is a list of {{ResizeObservation}}s.
It represents all Elements being observed.

{{ResizeObserver}} has a <dfn attribute for="ResizeObserver">activeTargets</dfn> slot, which is a list of {{ResizeObservation}}s. It represents all Elements whose size has changed since last observation broadcast.

<h3 id="css-definitions">CSS Definitions</h3>
<h4 id="content-rect">content rect</h4>
<dfn>content rect</dfn> is a rect whose:

* |width| is <a>content width</a>
* |height| is <a>content height</a>
* |top| is <a>padding top</a>
* |left| is <a>padding left</a>

Having content rect position be padding-top/left is useful for absolute positioning of target's children. Absolute position coordinate space origin is topLeft of the padding rect.

Watching content rect means that:

* observation will fire when watched Element is inserted/removed from DOM.

* observation will fire when watched Element display gets set to hidden.

* observations do not fire for non-replaced inline Elements.

* observations will not be triggered by CSS transforms.

<h3 id="algorithms">Algorithms</h3>

<h4 id="gather-active-observations-h">Gather active observations</h4>

It computes all active observations for a |document|. To <dfn>gather active observations</dfn>, run these steps:

1. For each |observer| in {{Document/resizeObservers}} run these steps:

    1. Clear |observer|'s {{ResizeObserver/activeTargets}}.

    2. For each |observation| in |observer|.{{ResizeObserver/observationTargets}} run this step:

        1. If |observation|.{{ResizeObservation/isActive()}} is true, add |observation| to {{ResizeObserver/activeTargets}}


<h4 id="has-active-observations-h">Has active observations</h4>

To determine if {{Document}} <dfn>has active observations</dfn> run these steps:

1. For each |observer| in {Document/resizeObservers}} run this step:

    1. If |observer|.{{ResizeObserver/activeTargets}} is not empty, return true.

2. return false.

<h4 id="broadcast-resize-notifications-h">Broadcast active observations</h4>

To <dfn>broadcast active observations</dfn> for a |document|,
run these steps:

1. For each |observer| in |document|.{{Document/resizeObservers}} run these steps:

    1. If |observer|.{{ResizeObserver/activeTargets}} slot is empty, continue.

    2. Let |entries| be an empty list of {{ResizeObserverEntry}}ies.

    3. For each |observation| in {{ResizeObserver/activeTargets}} perform these steps:

        1. Let |entry| be new {{ResizeObserverEntry}}(|observation|.target

        2. Add |entry| to |entries|

        3. Set |observation|.{{ResizeObservation/broadcastWidth}} to |entry|.contentRect.width.

        4. Set |observation|.{{ResizeObservation/broadcastHeight}} to |entry|.contentRect.height.

    4. Invoke |observer|.{{ResizeObserver/callback}} with |entries|.

    5. Clear |observer|.{{ResizeObserver/activeTargets}}.


<h4 id="deliver-resize-error">Deliver Resize Limit Error</h4>

To <dfn>deliver resize limit error notification</dfn> run these steps:

    1. Create a new {{ErrorEvent}}.

    2. Initialize event's message slot to "ResizeObserver loop limit exceeded.".

    3. Dispach the event to document's window.

<h3 id="lifetime">ResizeObserver Lifetime</h3>

A {{ResizeObserver}} will remain alive until both of these conditions are met:

* there are no scripting references to the observer.

* the observer is not observing any targets.

<h3 id="integrations">External Spec Integrations</h3>

<h4 id="html-event-loop"> HTML Processing Model: Event Loop</h4>

{{ResizeObserver}} processing happens inside the step 7.12 of the <a>HTML Processing Model</a> event loop.

Step 12 is currently underspecified as:

<q>For each fully active Document in docs, update the rendering or user interface of that Document and its browsing context to reflect the current state.</q>.

Existing step 12 can be fully specified as:

For each fully active Document in docs, run the following steps for that Document and its browsing contents:

    1. recalc styles

    2. update layout

    3. paint


{{ResizeObserver}} extends step 12 with resize notifications.
It tries to deliver all pending notifications by looping
until no pending notifications are available. Infinite looping is prevented
by limiting the number of times loop is repeated to RESIZE_OBSERVER_LOOP_LIMIT constant. Looping too many times generates an error.

Note: RESIZE_OBSERVER_LOOP_LIMIT is currently arbitrarily set to 32.
It might get adjusted based on data we obtain from real-world usage.

Step 12 with {{ResizeObserver}} notifications is:

For each fully active Document in docs, run the following steps for that Document and its browsing contentx:

1. recalc styles

2. update layout

3. let |resizeNotificationCount| be 0

4. <a>gather active observations</a> for {{Document}}

5. repeat while (document <a>has active observations</a> && |resizeNotificationCount| < RESIZE_OBSERVER_LOOP_LIMIT)

    1. increment |resizeNotificationCount| by 1

    2. <a>broadcast active observations</a>

    3. recalc styles

    4. update layout

    5. <a>gather active observations</a> for {{Document}}

    6. if (document <a>has active observations</a> && |resizeNotificationCount| is RESIZE_OBSERVER_LOOP_LIMIT) then <a>deliver resize limit error notification</a>


